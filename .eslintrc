{
    "parser": "@typescript-eslint/parser",
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/stylistic"
    ],
    "env": {
        "browser": true,
        "node": true,
        "es6": true
    },
    "plugins": ["@typescript-eslint", "eslint-plugin-html"],
    "rules": {
        // eslint
        "dot-notation": "error",
        "eqeqeq": "error",
        "no-caller": "error",
        "no-constant-condition": ["error", { "checkLoops": false }],
        "no-eval": "error",
        "no-extra-bind": "error",
        "no-new-func": "error",
        "no-new-wrappers": "error",
        "no-restricted-globals": [
            "error",
            { "name": "setTimeout" },
            { "name": "clearTimeout" },
            { "name": "setInterval" },
            { "name": "clearInterval" },
            { "name": "setImmediate" },
            { "name": "clearImmediate" }
        ],
        "no-template-curly-in-string": "error",
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "prefer-const": "error",
        "prefer-object-spread": "error",
        "unicode-bom": ["error", "never"],
        "no-extra-boolean-cast": "error",
        "no-case-declarations": "error",
        "no-cond-assign": "error",
        "no-inner-declarations": "error",
        "no-unused-expressions": "error",

        "no-restricted-syntax": [
            "error",
            {
                "selector": "Literal[raw=null]",
                "message": "Avoid using null; use undefined instead."
            },
            {
                "selector": "TSNullKeyword",
                "message": "Avoid using null; use undefined instead."
            }
        ],

        // @typescript-eslint/eslint-plugin
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "typeLike",
                "format": ["PascalCase"],
                "filter": {
                    "regex": "^(__String|[A-Za-z]+_[A-Za-z]+)$",
                    "match": false
                }
            },
            {
                "selector": "interface",
                "format": ["PascalCase"],
                "custom": { "regex": "^I[A-Z]", "match": false },
                "filter": {
                    "regex": "^I(Arguments|TextWriter|O([A-Z][a-z]+[A-Za-z]*)?)$",
                    "match": false
                }
            },
            {
                "selector": "variable",
                "format": ["camelCase", "PascalCase", "UPPER_CASE"],
                "leadingUnderscore": "allow",
                "filter": {
                    "regex": "^(_{1,2}filename|_{1,2}dirname|_+|[A-Za-z]+_[A-Za-z]+)$",
                    "match": false
                }
            },
            {
                "selector": "function",
                "format": ["camelCase", "PascalCase"],
                "leadingUnderscore": "allow",
                "filter": { "regex": "^[A-Za-z]+_[A-Za-z]+$", "match": false }
            },
            {
                "selector": "parameter",
                "format": ["camelCase"],
                "leadingUnderscore": "allow",
                "filter": {
                    "regex": "^(_+|[A-Za-z]+_[A-Z][a-z]+)$",
                    "match": false
                }
            },
            {
                "selector": "method",
                "format": ["camelCase", "PascalCase"],
                "leadingUnderscore": "allow",
                "filter": {
                    "regex": "^([0-9]+|[A-Za-z]+_[A-Za-z]+)$",
                    "match": false
                }
            },
            {
                "selector": "memberLike",
                "format": ["camelCase"],
                "leadingUnderscore": "allow",
                "filter": {
                    "regex": "^([0-9]+|[A-Za-z]+_[A-Za-z]+)$",
                    "match": false
                }
            },
            {
                "selector": "enumMember",
                "format": ["camelCase", "PascalCase"],
                "leadingUnderscore": "allow",
                "filter": { "regex": "^[A-Za-z]+_[A-Za-z]+$", "match": false }
            },
            { "selector": "property", "format": null }
        ],

        "@typescript-eslint/unified-signatures": "error",
        "@typescript-eslint/no-unused-expressions": [
            "error",
            { "allowTernary": true }
        ],

        // Rules enabled in typescript-eslint configs that are not applicable here
        // "@typescript-eslint/ban-ts-comment": "off",
        // "@typescript-eslint/class-literal-property-style": "off",
        // "@typescript-eslint/consistent-indexed-object-style": "off",
        // "@typescript-eslint/no-duplicate-enum-values": "off",
        // "@typescript-eslint/no-empty-function": "off",
        // "@typescript-eslint/no-namespace": "off",
        // "@typescript-eslint/no-non-null-asserted-optional-chain": "off",
        // "@typescript-eslint/no-var-requires": "off",
        // "@typescript-eslint/no-empty-interface": "off",
        // "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/ban-types": [
            "error",
            {
                "extendDefaults": true,
                "types": {
                    // This is theoretically good, but ts-eslint appears to mistake our declaration of Symbol for the global Symbol type.
                    // See: https://github.com/typescript-eslint/typescript-eslint/issues/7306
                    "Symbol": false,
                    "{}": false // {} is a totally useful and valid type.
                }
            }
        ],
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                // Igre: (solely underscores | starting with exactly one underscore)
                "argsIgnorePattern": "^(_+$|_[^_])",
                "varsIgnorePattern": "^(_+$|_[^_])"
            }
        ]
        // "@typescript-eslint/no-inferrable-types": "off",

        // Pending https://github.com/typescript-eslint/typescript-eslint/issues/4820
        // "@typescript-eslint/prefer-optional-chain": "off"
    }
}
